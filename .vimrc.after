let g:solarized_termcolors=256
let g:solarized_termtrans=1
let g:solarized_visibility="high"
let g:solarized_contrast="high"
set t_Co=256
set background=dark
colorscheme solarized

set wildmode=longest,list
" make tab completion for files/buffers act like bash "
set wildmenu
let mapleader='\'
" Fix slow O inserts"
set timeout timeoutlen=1000 ttimeoutlen=100
set cursorline
set colorcolumn=80,90
highlight ColorColumn ctermbg=8
set mouse=a
set splitright
set splitbelow

"Spell checking git commits and markdown"
autocmd BufRead,BufNewFile *.md setlocal spell
autocmd BufNewFile,BufReadPost *.md set filetype=markdown
autocmd FileType gitcommit setlocal spell

"Ctrl-P related settings
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files | grep -v -E ".*\.(jpg|gif|png)$"']
let g:ctrlp_match_window_reversed = 0
let g:ctrlp_open_multiple_files = 'vj'
let g:ctrlp_arg_map = 0
nmap <leader>t :CtrlPMixed<CR>

let g:ctrlp_prompt_mappings = {
    \ 'AcceptSelection("e")': ['<c-v>', '<2-LeftMouse>'],
    \ 'AcceptSelection("v")': ['<cr>', '<RightMouse>'],
    \ }

"Vim Powerline
let g:Powerline_symbols = 'fancy'


let g:ackprg="ack-grep -H --nocolor --nogroup --column --css --ruby --js --rake --yaml --type-set css=.css,.sass "
nmap <leader>s :Ack<space><C-r><C-w><CR>
nmap <leader>a :Ack<space>

" Remove trailing whitespaces
" " taken from:
" http://stackoverflow.com/questions/356126/how-can-you-automatically-remove-trailing-whitespace-in-vim/1618401#1618401
fun! <SID>StripTrailingWhitespaces()
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  call cursor(l, c)
endfun

 " auto-strip trailing white space for ruby files
autocmd BufWritePre *.{rb,html.erb,coffee,clj,ls,yml,js,html,css,scss} :call <SID>StripTrailingWhitespaces()

" backup to ~/.tmp
set backup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set backupskip=/tmp/*,/private/tmp/*
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set writebackup
set noswapfile
set autoread
vmap <C-c> :<Esc>`>a<CR><Esc>mx`<i<CR><Esc>my'xk$v'y!xclip -selection c<CR>u
map <Insert> :set paste<CR>i<CR><CR><Esc>k:.!xclip -o<CR>JxkJx:set nopaste<CR>

augroup AuNERDTreeCmd
  autocmd!
augroup end

let g:vim_markdown_folding_disabled=1

map <leader>n :NERDTreeToggle<CR>

" Tabularize mappings
func! SetTabularizeMappings()
  " Tabularize assignments
  " Uses zero-width negative lookahead to prevent splitting up hashrockets:
  nmap <Leader>a= :Tabularize /=\@<!=[\=>]\@!<CR>
  vmap <Leader>a= :Tabularize /=\@<!=[\=>]\@!<CR>
  " Tabularize argument lists
  nmap <Leader>a, :Tabularize /,\zs/l1r0<CR>
  vmap <Leader>a, :Tabularize /,\zs/l1r0<CR>
  " Tabularize JS style object definitions
  " Exclude ':' char from match to prevent colons being columnized:
  nmap <Leader>a: :Tabularize /:\zs/l1r0<CR>
  vmap <Leader>a: :Tabularize /:\zs/l1r0<CR>
  " Tabularize hashrockets
  nmap <Leader>ah :Tabularize /=><CR>
  vmap <Leader>ah :Tabularize /=><CR>
  " Tabularize hash arguments
  nmap <Leader>ar :Tabularize /:[^,]\{-1,}=><CR>
  vmap <Leader>ar :Tabularize /:[^,]\{-1,}=><CR>
  " Align block delimiters
  nmap <Leader>ab :Tabularize /\(^[^{]*\zs{\\|}$\)<CR>
  vmap <Leader>ab :Tabularize /\(^[^{]*\zs{\\|}$\)<CR>
endfu
autocmd VimEnter * if exists(":Tabularize") | exe "call SetTabularizeMappings()" | endif

" Open tag in vertical split
"nnoremap <silent> ,F :let word=expand("<cword>")<CR>:vsp<CR>:wincmd w<cr>:exec("tag ". word)<cr>
nnoremap <silent> ,F :vsp <CR>:exec("tag ".expand("<cword>"))<CR>


let g:rainbow_active = 1
let g:livepreview_previewer = 'evince'

set tags+=./gems.tags
